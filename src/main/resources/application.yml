spring:
  application:
    name: global-revenue-calculator
  
  profiles:
    active: local
  
  datasource:
    url: jdbc:postgresql://localhost:5432/revenue_calculator
    username: ${DB_USERNAME:revenue_user}
    password: ${DB_PASSWORD:revenue_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  
  redis:
    host: localhost
    port: 6379
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    consumer:
      group-id: revenue-calculator-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest

  cache:
    type: redis
    redis:
      time-to-live: 300000

server:
  port: 8080
  servlet:
    context-path: /

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.revenue.calculator: DEBUG
    org.springframework.kafka: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Custom application properties
revenue:
  calculation:
    thread-pool-size: 10
    batch-size: 100
    high-value-threshold: 10000.00
  
  cache:
    ttl-minutes: 5
    max-entries: 1000

---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/revenue_calculator
  redis:
    host: redis
  kafka:
    bootstrap-servers: kafka:9092

---
spring:
  config:
    activate:
      on-profile: kubernetes
  datasource:
    url: jdbc:postgresql://postgres-service:5432/revenue_calculator
  redis:
    host: redis-service
  kafka:
    bootstrap-servers: kafka-service:9092