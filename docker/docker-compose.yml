version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: revenue-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-revenue_calculator}
      POSTGRES_USER: ${POSTGRES_USER:-revenue_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-revenue_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - revenue-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revenue_user -d revenue_calculator"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: revenue-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - revenue-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: revenue-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - revenue-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: revenue-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - revenue-network

  revenue-calculator:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: revenue-calculator-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-revenue_calculator}
      DB_USERNAME: ${POSTGRES_USER:-revenue_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-revenue_pass}
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - revenue-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: revenue-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - revenue-network

volumes:
  postgres_data:
  redis_data:

networks:
  revenue-network:
    driver: bridge